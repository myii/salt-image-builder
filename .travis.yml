# -*- coding: utf-8 -*-
# vim: ft=yaml
---
## Machine config
os: linux
dist: bionic
version: '~> 1.0'
language: shell
services:
  - docker

env:
  global:
    - TRAVIS_SECURE_ENV_VARS: true

  # VARS:
  # DN: distro name (amazonlinux, archlinux, centos, debian, fedora, opensuse, ubuntu)
  # DV: distro version
  # PI: packages installer, used as dockerfile extension (deb, yum, pac, zyp)
  # SIM: salt install method (git, stable)
  # SV: salt version (master, 3000, 2019.2, 2018.3)
  # PV: python version (3, 2)
  # EP: extra packages required for the specific build
  jobs:
    # AMAZONLINUX
    - DN=amazonlinux DV=2 PI=yum SIM=git    SV=master PV=3 EP="yum-utils python3-pip procps-ng"
    - DN=amazonlinux DV=2 PI=yum SIM=stable SV=3000   PV=3 EP="yum-utils python3-pip procps-ng"
    - DN=amazonlinux DV=2 PI=yum SIM=stable SV=2019.2 PV=3 EP="yum-utils python3-pip procps-ng"
    - DN=amazonlinux DV=1 PI=yum SIM=stable SV=2019.2 PV=2 EP="yum-utils python-pip procps-ng"
    - DN=amazonlinux DV=1 PI=yum SIM=stable SV=2018.3 PV=2 EP="yum-utils python-pip procps-ng"

    # ARCHLINUX
    # The Salt bootstrap installer does not provide packages nor installs with py3 for Arch
    # so we're building only the git'ted py2 versions
    - DN=archlinux/base DV=latest PI=pac SIM=git SV=master PV=2 EP="openssl openssh awk procps python2-pip"
    - DN=archlinux/base DV=latest PI=pac SIM=git SV=3000   PV=2 EP="openssl openssh awk procps python2-pip"
    - DN=archlinux/base DV=latest PI=pac SIM=git SV=2019.2 PV=2 EP="openssl openssh awk procps python2-pip"
    - DN=archlinux/base DV=latest PI=pac SIM=git SV=2018.3 PV=2 EP="openssl openssh awk procps python2-pip"

    # CENTOS
    - DN=centos DV=8 PI=yum SIM=git    SV=master PV=3 EP="python3 python3-pip python3-devel openssl-devel swig glibc-langpack-en"
    - DN=centos DV=8 PI=yum SIM=stable SV=3000   PV=3 EP="python3 python3-pip python3-devel openssl-devel swig glibc-langpack-en"
    - DN=centos DV=8 PI=yum SIM=stable SV=2019.2 PV=3 EP="python3 python3-pip python3-devel openssl-devel swig glibc-langpack-en"
    - DN=centos DV=7 PI=yum SIM=stable SV=2019.2 PV=3 EP="python3 python3-pip python3-devel openssl-devel swig gcc-g++ zeromq zeromq-devel"
    - DN=centos DV=7 PI=yum SIM=stable SV=2019.2 PV=2 EP="python2-pip"
    - DN=centos DV=7 PI=yum SIM=stable SV=2018.3 PV=2 EP="python2-pip"
    - DN=centos DV=6 PI=yum SIM=stable SV=2018.3 PV=2 EP="python27-pip"

    # DEBIAN
    - DN=debian DV=10 PI=apt SIM=git    SV=master PV=3 EP="python3-apt python3-pip"
    - DN=debian DV=10 PI=apt SIM=stable SV=3000   PV=3 EP="python3-pip"
    - DN=debian DV=10 PI=apt SIM=stable SV=2019.2 PV=3 EP="python3-pip"
    # There's no Py2 repo for debian10 so the bootstrap fails any attempt to install dependencies to
    # install 2018.3 from git. Also, there's no 2018.3 repo in buster (neither py2 or py3), so trying
    # to install this combination atm is more work thant it's worth.
    # debian,10 SIM=stable SV=2018.3 PV=2
    - DN=debian DV=9 PI=apt SIM=stable SV=2019.2 PV=3 EP="python3-pip"
    - DN=debian DV=9 PI=apt SIM=stable SV=2018.3 PV=2 EP="python-pip"
    - DN=debian DV=8 PI=apt SIM=stable SV=2018.3 PV=2 EP="python-pip"

    # FEDORA
    # Fedora has no python3 packages due to a tornado issue,
    # but they ship with Python3 since 29, so we install it using git
    # https://bugzilla.redhat.com/show_bug.cgi?id=1723207
    - DN=fedora DV=31 PI=dnf SIM=git SV=master PV=3 EP="python3-pip"
    - DN=fedora DV=31 PI=dnf SIM=git SV=3000   PV=3 EP="python3-pip"
    - DN=fedora DV=31 PI=dnf SIM=git SV=2019.2 PV=3 EP="python3-pip"
    - DN=fedora DV=30 PI=dnf SIM=git SV=2018.3 PV=3 EP="python3-pip"

    # OPENSUSE
    - DN=opensuse/leap DV=15.1 PI=zyp SIM=git SV=master PV=3 EP="python3-pip"
    - DN=opensuse/leap DV=15.1 PI=zyp SIM=git SV=3000   PV=3 EP="python3-pip"
    - DN=opensuse/leap DV=15.1 PI=zyp SIM=git SV=2019.2 PV=3 EP="python3-pip"
    - DN=opensuse/leap DV=15.1 PI=zyp SIM=git SV=2018.3 PV=2 EP="python-pip"

    # UBUNTU
    - DN=ubuntu DV=18.04 PI=apt SIM=git    SV=master PV=3 EP="python3-apt python3-pip"
    - DN=ubuntu DV=18.04 PI=apt SIM=stable SV=3000   PV=3 EP="python3-pip"
    - DN=ubuntu DV=18.04 PI=apt SIM=stable SV=2019.2 PV=3 EP="python3-pip"
    - DN=ubuntu DV=18.04 PI=apt SIM=stable SV=2019.2 PV=2 EP="python-pip"
    - DN=ubuntu DV=18.04 PI=apt SIM=stable SV=2018.3 PV=2 EP="python-pip"
    - DN=ubuntu DV=16.04 PI=apt SIM=stable SV=2019.2 PV=3 EP="python3-pip"
    - DN=ubuntu DV=16.04 PI=apt SIM=stable SV=2018.3 PV=2 EP="python-pip"

# adding the inspec license-accepted file as different lines because of
# https://travis-ci.community/t/multiline-commands-have-two-spaces-in-front-breaks-heredocs/2756/4
before_install:
  - |
    if [ ! -x /usr/bin/inspec ]; then
      curl -L -o /tmp/inspec.deb https://packages.chef.io/files/stable/inspec/4.18.39/ubuntu/18.04/inspec_4.18.39-1_amd64.deb
      sudo dpkg -i /tmp/inspec.deb
      mkdir -p ~/.chef/accepted_licenses
      echo '---' | tee ~/.chef/accepted_licenses/inspec
      echo 'name: inspec' | tee -a ~/.chef/accepted_licenses/inspec
      echo 'date_accepted: 2019-05-04T22:10:07+00:00' | tee -a ~/.chef/accepted_licenses/inspec
      echo 'accepting_product: inspec' | tee -a ~/.chef/accepted_licenses/inspec
      echo 'accepting_product_version: 4.18.39' | tee -a ~/.chef/accepted_licenses/inspec
      echo 'user: ubuntu' | tee -a ~/.chef/accepted_licenses/inspec
      echo 'file_format: 1' | tee -a ~/.chef/accepted_licenses/inspec
    fi

install:
  - export TAG=$(echo ${DN} | sed "s#/#-#g")-${DV}
  - "echo \"Building: ${TAG}\""
  - docker build .
      --file "Dockerfile.${PI}"
      --tag "${TAG}"
      --build-arg DISTRO_NAME="${DN}"
      --build-arg DISTRO_VERSION="${DV}"
      --build-arg SALT_INSTALL_METHOD="${SIM}"
      --build-arg SALT_VERSION="${SV}"
      --build-arg PYTHON_VERSION="${PV}"
      --build-arg EXTRA_PACKAGES="${EP}"

script:
  - docker run --detach=true --name "inspec-${TAG}-${PI}-${PV}-${SIM}-${SV}" "${TAG}" tail -f /dev/null
  - inspec exec test/integration  --input py_version="${PV}" salt_version="${SV}" --target=docker://"inspec-${TAG}-${PI}-${PV}-${SIM}-${SV}"
  - docker stop "inspec-${TAG}-${PI}-${PV}-${SIM}-${SV}"
  - docker rm "inspec-${TAG}-${PI}-${PV}-${SIM}-${SV}"

# Using after_success because deploy does not support docker.
after_success:
  - |
    if [ "$TRAVIS_BRANCH" = "master" ]; then
      echo "Push to DockerHub"
      echo "${DOCKERHUB_PASSWORD}" | docker login -u "${DOCKERHUB_USER}" --password-stdin
      docker tag ${TAG} ${DOCKERHUB_USER}/salt-${SV}-py${PV}:${TAG}
      docker push ${DOCKERHUB_USER}/salt-${SV}-py${PV}:${TAG}
      if [ "${TAG}" = "archlinux-base-latest" ]; then
        docker tag ${TAG} ${DOCKERHUB_USER}/salt-${SV}-py${PV}:arch-base-latest
        docker push ${DOCKERHUB_USER}/salt-${SV}-py${PV}:arch-base-latest
      fi
    fi
